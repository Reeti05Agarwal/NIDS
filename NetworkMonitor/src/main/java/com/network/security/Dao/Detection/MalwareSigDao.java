package com.network.security.Dao.Detection;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.network.security.Intrusion_detection.MalwareSigDetection;
import com.network.security.util.DBConnection;

/**
 * DAO for CRUD operations on malware signature detection rules.
 */
public class MalwareSigDao {

    /**
     * Inserts a new malware signature record into the database.
     */
    public void insertMalwareSignature(MalwareSigDetection ms) {
        String sql = "INSERT INTO malformed_packet_signatures"
                + "(check_type, expected_value, field, severity) VALUES (?, ?, ?, ?)";
        try (Connection conn = DBConnection.getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, ms.getCheckTypeMS());
            stmt.setString(2, ms.getPatternMS());
            stmt.setString(3, ms.getFieldMS());
            stmt.setString(4, ms.getSeverity());
            stmt.executeUpdate();

        } catch (SQLException e) {
            System.err.println("[ERROR] Failed to insert malware signature: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Loads a malware signature rule by its check_type value.
     */
    public MalwareSigDetection loadByCheckType(String checkType) {
        String sql = "SELECT check_type, expected_value, field, severity"
                + " FROM malformed_packet_signatures WHERE check_type = ?";
        MalwareSigDetection ms = null;
        try (Connection conn = DBConnection.getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, checkType);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    ms = new MalwareSigDetection();
                    ms.setCheckTypeMS(rs.getString("check_type"));
                    ms.setPatternMS(rs.getString("expected_value"));
                    ms.setFieldMS(rs.getString("field"));
                    ms.setSeverity(rs.getString("severity"));
                }
            }
        } catch (SQLException e) {
            System.err.println("[ERROR] Failed to load malware signature: " + e.getMessage());
            e.printStackTrace();
        }
        return ms;
    }

    /**
     * Updates the expected_value for a given record ID.
     */
    public void updateExpectedValue(int id, String expectedValue) {
        String sql = "UPDATE malformed_packet_signatures SET expected_value = ? WHERE id = ?";
        try (Connection conn = DBConnection.getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, expectedValue);
            stmt.setInt(2, id);
            stmt.executeUpdate();

        } catch (SQLException e) {
            System.err.println("[ERROR] Failed to update expected_value: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Updates the field for a given record ID.
     */
    public void updateField(int id, String field) {
        String sql = "UPDATE malformed_packet_signatures SET field = ? WHERE id = ?";
        try (Connection conn = DBConnection.getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, field);
            stmt.setInt(2, id);
            stmt.executeUpdate();

        } catch (SQLException e) {
            System.err.println("[ERROR] Failed to update field: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Deletes a malware signature rule by ID.
     */
    public void deleteById(int id) {
        String sql = "DELETE FROM malformed_packet_signatures WHERE id = ?";
        try (Connection conn = DBConnection.getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, id);
            stmt.executeUpdate();

        } catch (SQLException e) {
            System.err.println("[ERROR] Failed to delete malware signature: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Retrieves all malware signature rules.
     */
    public List<MalwareSigDetection> getAllSignatures() {
        List<MalwareSigDetection> list = new ArrayList<>();
        String sql = "SELECT id, check_type, expected_value, field, severity"
                + " FROM malformed_packet_signatures";
        try (Connection conn = DBConnection.getConnection(); PreparedStatement stmt = conn.prepareStatement(sql); ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                MalwareSigDetection ms = new MalwareSigDetection();
                ms.setCheckTypeMS(rs.getString("check_type"));
                ms.setPatternMS(rs.getString("expected_value"));
                ms.setFieldMS(rs.getString("field"));
                ms.setSeverity(rs.getString("severity"));
                list.add(ms);
            }
        } catch (SQLException e) {
            System.err.println("[ERROR] Failed to fetch malware signatures: " + e.getMessage());
            e.printStackTrace();
        }
        return list;
    }
}
